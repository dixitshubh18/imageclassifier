# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iRQS4SWGFGoSxzRTpodNPmFaWxtDTH7D
"""
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import load_model

from keras.models import load_model
from PIL import Image, ImageOps
import numpy as np
import os

# TensorFlow is required for Keras to work
# Install pillow instead of PIL

# Disable scientific notation for clarity
np.set_printoptions(suppress=True)

# Load the model
model = load_model("/root/imageclassifier/keras_model.h5", compile=False)

# Load the labels
class_names = open("/root/imageclassifier/labels.txt", "r").readlines()

def predict_and_rename(image_path):
    # Create the array of the right shape to feed into the keras model
    data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

    # Process the image
    image = Image.open(image_path).convert("RGB")
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
    image_array = np.asarray(image)
    normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
    data[0] = normalized_image_array

    # Predict the class
    prediction = model.predict(data)
    index = np.argmax(prediction)
    class_name = class_names[index].strip()  # Remove newline characters
    confidence_score = prediction[0][index]

    # Print prediction and confidence score
    print(f"{image_path} -> Class: {class_name}, Confidence Score: {confidence_score}")

    # Rename the file
    directory = os.path.dirname(image_path)
    new_file_name = f"{os.path.splitext(os.path.basename(image_path))[0]}_{class_name}.jpg"
    os.rename(image_path, os.path.join(directory, new_file_name))

# Path to the directory with images
directory_path = input("")

# Loop over each file in the directory
for filename in os.listdir(directory_path):
    if filename.lower().endswith((".png", ".jpg", ".jpeg")):
        file_path = os.path.join(directory_path, filename)
        predict_and_rename(file_path)





